name: MeowBe CI & CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # build:
  #   name: ⚙️ Build & Unit Test
  #   runs-on: ubuntu-latest
  #   if: >
  #     !contains(github.event.head_commit.message, '[skip ci]') &&
  #     !contains(github.event.head_commit.message, '[ci skip]') &&
  #     github.event_name == 'pull_request' &&
  #     github.base_ref == 'develop' &&
  #     contains(github.head_ref, 'feat')
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: temurin
  #         java-version: 17
  #     - name: Cache Gradle
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.gradle/caches
  #           ~/.gradle/wrapper
  #         key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle','**/settings.gradle') }}
  #     - name: Ensure gradlew is executable
  #       run: chmod +x gradlew
  #     - name: Run tests
  #       run: ./gradlew clean test

  # integration:
  #   name: 🔗 Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: >
  #     !contains(github.event.head_commit.message, '[skip ci]') &&
  #     !contains(github.event.head_commit.message, '[ci skip]') &&
  #     (
  #       ( github.event_name == 'pull_request'
  #         && (
  #              github.base_ref == 'release' && github.head_ref == 'develop'
  #           || github.base_ref == 'main'    && startsWith(github.head_ref, 'release/')
  #           || github.base_ref == 'main'    && startsWith(github.head_ref, 'hotfix/')
  #           || github.base_ref == 'main'    && github.head_ref == 'develop'
  #         )
  #       )
  #       || (
  #         github.event_name == 'push'
  #         && (
  #              github.ref == 'refs/heads/develop'
  #           || startsWith(github.ref, 'refs/heads/release/')
  #           || github.ref == 'refs/heads/main'
  #         )
  #       )
  #     )
  #   services:
  #     mysql:
  #       image: mysql:8.0
  #       env:
  #         MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
  #         MYSQL_DATABASE: meow1
  #       ports:
  #         - 3306:3306
  #       options: >-
  #         --health-cmd="mysqladmin ping --silent"
  #         --health-interval=10s --health-retries=3
  #   env:
  #     SPRING_DATASOURCE_URL:       jdbc:mysql://localhost:3306/meow1?serverTimezone=Asia/Seoul
  #     SPRING_DATASOURCE_USERNAME:  root
  #     SPRING_DATASOURCE_PASSWORD:  ${{ secrets.DB_ROOT_PASSWORD }}
  #     SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
  #     SERVER_PORT:                 8080
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: temurin
  #         java-version: 17
  #     - name: Ensure gradlew is executable
  #       run: chmod +x gradlew
  #     - name: Build Spring Boot app (no tests)
  #       run: ./gradlew bootJar -x test
  #     - name: Start Spring Boot app
  #       run: |
  #         java -jar build/libs/*.jar &
  #     - name: Wait for Backend health
  #       run: |
  #         for i in {1..12}; do
  #           curl -sf http://localhost:$SERVER_PORT/api/health && echo "🟢 OK" && exit 0
  #           sleep 5
  #         done
  #         echo "❌ Backend health check failed" && exit 1

  deploy-backend:
    name: 🚀 Deploy Backend
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      !contains(github.event.head_commit.message, '[skip cd]') &&
      !contains(github.event.head_commit.message, '[cd skip]')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is available for deployments

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ACTIONS }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ENV & App Names
        id: meta
        shell: bash
        run: |
          # 1) 배포 stage
          deploy_env=prod

          # 2) 서비스명 고정
          service_name=9_meow_be
          
          registry="${{ secrets.ECR_REGISTRY }}"; registry="${registry%/}"
          image_uri="${registry}/${deploy_env}/${service_name}"

          echo "ENV=${deploy_env}"                             >> $GITHUB_ENV
          echo "SERVICE=${service_name}"                       >> $GITHUB_ENV
          echo "REGISTRY=${registry}"                          >> $GITHUB_ENV
          echo "IMAGE_URI=${image_uri}"                        >> $GITHUB_ENV
          echo "APP_NAME=meow-${deploy_env}-deployment"        >> $GITHUB_ENV
          echo "DG_NAME=DG-meow-${deploy_env}-be"   >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache buildx layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.ENV }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.ENV }}-
      - name: Fetch all Git Tags
        run: git fetch --tags --quiet

      - name: Determine version tag
        id: get_version
        shell: bash
        run: |
          # If head commit is tagged, use that tag or fallback to "latest"
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          echo "Determined version =${VERSION}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # update ssm version tag
          aws ssm put-parameter \
            --name /meow/prod/BACKEND_IMAGE_TAG \
            --value "$VERSION" \
            --type String \
            --overwrite
          
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:${{ env.VERSION }}
            ${{ env.IMAGE_URI }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Create stop_backend.sh script
        run: |
          echo -e '#!/bin/bash\necho "no backend to stop"' > scripts/stop_backend.sh
          chmod +x scripts/stop_backend.sh
      - name: Prepare deployment scripts from template
        run: |
          mkdir -p scripts
          # 템플릿 치환 필요 없음
          cp scripts/deploy_backend.sh.tmpl scripts/deploy_backend.sh
          chmod +x scripts/deploy_backend.sh
      - name: Prepare appspec.yml
        run: | 
          cat <<EOF > appspec.yml
          version: 0.0
          os: linux
          hooks:
            BeforeInstall:
              - location: scripts/stop_backend.sh
                timeout: 300
                runas: ubuntu
            AfterInstall:
              - location: scripts/deploy_backend.sh
                timeout: 300
                runas: ubuntu
          EOF
      - name: Zip deployment bundle
        run: zip -r deploy-bundle.zip appspec.yml scripts/ 
      
      - name: Upload bundle to S3
        run: |
          aws s3 cp deploy-bundle.zip \
            s3://${{ secrets.DEPLOY_BUCKET }}/prod/backend/deploy-bundle.zip
          

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.APP_NAME }} \
            --deployment-group-name ${{ env.DG_NAME }} \
            --s3-location bucket=${{ secrets.DEPLOY_BUCKET }},key=${{ env.ENV }}/deploy-bundle.zip,bundleType=zip \
            --description "Deploy ${{ env.VERSION }} to production"
