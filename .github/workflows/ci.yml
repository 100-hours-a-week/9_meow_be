# .github/workflows/ci.yml
name: MeowBe CI

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - develop
      - release
      - main

jobs:
  build:
    name: ⚙️ Build & Unit Test
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && (
        ( github.event_name == 'pull_request'
             && github.base_ref == 'develop'
             && contains(github.head_ref, 'feat')
        )
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle','**/settings.gradle') }}

      - name: Ensure gradlew is executable
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew clean test

  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: build                       # unit-tests → build 로 수정
    if: >
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && (
        (
          github.event_name == 'pull_request'
          && (
            github.base_ref == 'release' && github.head_ref == 'develop'
            || github.base_ref == 'main' && startsWith(github.head_ref, 'release/')
            || github.base_ref == 'main' && startsWith(github.head_ref, 'hotfix/')
            || github.base_ref == 'main' && github.head_ref == 'develop'
          )
        )
        || (
          github.event_name == 'push'
          && (
               github.ref == 'refs/heads/develop'
            || startsWith(github.ref, 'refs/heads/release/')
            || github.ref == 'refs/heads/main'
          )
        )
      )
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: meow1
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s --health-retries=3

    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/meow1?serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SERVER_PORT: 8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Ensure gradlew is executable
        run: chmod +x gradlew

      - name: Build Spring Boot app (no tests)
        run: ./gradlew bootJar -x test

      - name: Start Spring Boot app
        run: |
          java -jar build/libs/*.jar &

      - name: Wait for Backend health
        run: |
          for i in {1..12}; do
            curl -sf http://localhost:$SERVER_PORT/api/health && echo "🟢 OK" && exit 0
            sleep 5
          done
          echo "❌ Backend health check failed" && exit 1

  deploy-backend:
    name: 🚀 Deploy Backend
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip cd]')
      && !contains(github.event.head_commit.message, '[cd skip]')
      && github.event_name == 'push'
      && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ACTIONS }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ECR Namespace
        id: ns
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "develop" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$BRANCH" =~ ^release/ ]]; then
            echo "ENV=release" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV=skip" >> $GITHUB_ENV
          fi

      - name: Build, Tag & Push to ECR
        if: env.ENV != 'skip'
        run: |
          SERVICE=9_meow_be
          IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${ENV}/${SERVICE}
          docker build -t $IMAGE_URI:latest .
          docker push $IMAGE_URI:latest

      - name: Start SSH Agent (BE)
        if: env.ENV != 'skip'
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Deploy BE via update.sh
        if: env.ENV != 'skip'
        uses: appleboy/ssh-action@v0.1.8
        with:
          host:      ${{ secrets.SERVER_HOST }}
          username:  ubuntu
          key:       ${{ secrets.SERVER_SSH_KEY }}
          port:      22
          script:    /home/ubuntu/meow/deployment/update.sh
